// frontend/src/types/chat.ts

/**
 * Represents a source document or chunk of context retrieved by the RAG system.
 */
export interface MessageSource {
  text: string; // The content of the source chunk
  score: number; // The relevance score of this chunk from the vector store
  // Optional: Add more metadata like document_name, page_number if available from backend
  // document_name?: string;
}

/**
 * Defines the sender of a chat message.
 * 'user' for messages sent by the human user.
 * 'ai' for messages generated by the AI assistant.
 */
export type MessageSender = 'user' | 'ai';

/**
 * Represents a single message in the chat interface.
 */
export interface ChatMessage {
  id: string; // Unique identifier for the message (e.g., UUID)
  text: string; // The textual content of the message
  sender: MessageSender; // Who sent the message
  sources?: MessageSource[]; // Optional: List of sources for AI-generated messages
  isLoading?: boolean; // Optional: True if this is an AI message currently being generated
  timestamp: Date; // The time the message was created/received
  // Optional: Add other metadata like message_type ('error', 'info') if needed
  // message_type?: 'text' | 'error' | 'info';
}

/**
 * Represents the overall state of the chat.
 */
export interface ChatState {
  messages: ChatMessage[]; // List of all messages in the current conversation
  isLoadingResponse: boolean; // True when the application is waiting for a response from the AI
  error: string | null; // Stores any error message related to chat operations
}

/**
 * Defines the shape of the ChatContext, including state and action dispatchers.
 */
export interface ChatContextType extends ChatState {
  /**
   * Adds a new message to the chat.
   * @param messageContent - The content of the message, excluding 'id' and 'timestamp' which will be generated.
   * @returns The newly created ChatMessage object with id and timestamp.
   */
  addMessage: (messageContent: Omit<ChatMessage, 'id' | 'timestamp'>) => ChatMessage;

  /**
   * Allows direct setting/replacement of the entire messages array.
   * Useful for clearing chat or loading a persisted chat history.
   * @param messages - The new array of ChatMessage objects.
   */
  setMessages: (messages: ChatMessage[]) => void;

  /**
   * Sets the loading state, typically true while waiting for an AI response.
   * @param isLoading - Boolean indicating if a response is being loaded.
   */
  setIsLoadingResponse: (isLoading: boolean) => void;

  /**
   * Sets or clears an error message related to chat operations.
   * @param error - The error message string, or null to clear the error.
   */
  setError: (error: string | null) => void;

  // Placeholder for a function that will orchestrate sending a user's query
  // to the backend and handling the response (including adding AI message and sources).
  // This will be implemented in a later stage.
  // sendMessageAndProcessResponse: (queryText: string) => Promise<void>;
}
